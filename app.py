import streamlit as st
import requests
import os
from dotenv import load_dotenv
import csv
from openai import OpenAI
import json
import PyPDF2
import textwrap

# === CONFIGURA√á√ïES ===

load_dotenv()

client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
)
ZAMMAD_API_URL = os.getenv("ZAMMAD_API_URL")
ZAMMAD_API_TOKEN = os.getenv("ZAMMAD_API_TOKEN")
CATEGORIA_TXT = "categorias.json"
OPENAI_MODEL = "gpt-4.1"

HEADERS_ZAMMAD = {
    "Authorization": f"Token token={ZAMMAD_API_TOKEN}",
    "Content-Type": "application/json"
}

# === FUN√á√ïES ===

def carregar_categorias(filepath):
    with open(filepath, encoding="utf-8") as f:
        categorias = json.load(f)
    return categorias


def carregar_grupos(path_txt):
    grupos = {}
    with open(path_txt, "r", encoding="utf-8") as file:
        for linha in file:
            if linha.startswith("ID:"):
                partes = linha.strip().split(", Nome:")
                if len(partes) == 2:
                    id_str = partes[0].replace("ID:", "").strip()
                    nome = partes[1].strip()
                    grupos[nome] = int(id_str)
    return grupos


def gerar_prompt(title, note, categorias_dict):
    prompt = """Voc√™ √© um assistente especializado na **categoriza√ß√£o de chamados de Service Desk**. Sua tarefa √© analisar o t√≠tulo e a descri√ß√£o do chamado e classific√°-lo corretamente com **uma categoria e subcategoria** entre as op√ß√µes fornecidas.

üìå **REGRAS IMPORTANTES**:
- Use **exclusivamente** as categorias e subcategorias listadas abaixo.
- Algumas podem estar escritas de forma diferente no chamado. Use o **contexto e o significado** para encontrar a correspond√™ncia correta.
- Se houver mais de uma possibilidade, escolha a op√ß√£o **mais precisa e relevante**.
- **N√£o invente** novas categorias ou subcategorias.
- A sa√≠da deve ser apenas no formato: `Categoria > Subcategoria`

üîΩ **Categorias e Subcategorias Dispon√≠veis**:
"""
    for categoria, subcategorias in categorias_dict.items():
        for sub in subcategorias:
            prompt += f"- {categoria} > {sub}\n"

    prompt += "\n"
    prompt += f"üìù **T√≠tulo do chamado**: {title.strip()}\n"
    if note:
        prompt += f"üßæ **Descri√ß√£o detalhada**: {note.strip()}\n"
    prompt += "\n‚úÖ **Classifica√ß√£o final esperada**: Apenas o nome da categoria e subcategoria, no formato `Categoria > Subcategoria`"
    
    return prompt


def classificar_com_openai(prompt):
    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente de categoriza√ß√£o de chamados t√©cnicos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        
        resposta = response.choices[0].message.content.strip()
        
        if ">" not in resposta or len(resposta.split(">")) != 2:
            return None, None  # retorno seguro para tratar depois

        categoria, subcategoria = [parte.strip() for parte in resposta.split(">")]

        if not categoria or not subcategoria:
            return None, None

        return categoria, subcategoria
    
    except Exception as e:
        print(f"Erro ao classificar categoria: {str(e)}")
        return None, None


def classificar_grupo_com_openai(title, note, grupos_dict):
    nomes_grupos = list(grupos_dict.keys())
    opcoes_formatadas = "\n".join([f"- {g}" for g in nomes_grupos])

    prompt = f"""
        Voc√™ √© um assistente t√©cnico respons√°vel por classificar chamados. Com base no t√≠tulo e na descri√ß√£o de um chamado, classifique-o de acordo com o grupo correto abaixo,selecione apenas 1 grupo:

        Grupos dispon√≠veis:
        {opcoes_formatadas}

        T√≠tulo: {title}
        Descri√ß√£o: {note}

        Retorne apenas o **NOME exato** de um dos grupos listados.
        Retorne apenas 1 grupo, sem explica√ß√µes adicionais.

        """.strip()

    if not title.strip() and not note.strip():
        return "Indefinido ‚Äì t√≠tulo ou descri√ß√£o ausente."

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente t√©cnico especialista em direcionar chamados para o grupo correto."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        nome_grupo = response.choices[0].message.content.strip()
        grupo_id = grupos_dict.get(nome_grupo, "N√£o encontrado")
        return nome_grupo, grupo_id
    except Exception as e:
        return f"Erro ao classificar grupo: {str(e)}", None

grupos_dict = carregar_grupos("Grupos.txt")


def classificar_nivel_com_openai(title, note):
    definicoes_nivel = """
Voc√™ √© um assistente t√©cnico treinado para classificar chamados com base em n√≠veis de suporte t√©cnico,Sua tarefa √© classificar chamados t√©cnicos em um dos tr√™s n√≠veis de complexidade, conforme as defini√ß√µes abaixo::

- N√≠vel 1 (N1): Chamados b√°sicos, como reiniciar servi√ßos, monitoramento simples, problemas simples de login, coleta de logs, uso b√°sico de comandos Docker.
- N√≠vel 2 (N2): Chamados intermedi√°rios com an√°lise de performance detalhada, ajustes de configura√ß√£o, problemas de rede avan√ßados, gerenciamento de certificados e logs.
- N√≠vel 3 (N3): Chamados cr√≠ticos e complexos, como containers que n√£o iniciam, falhas graves no Docker Daemon, perda de dados, desempenho gravemente degradado, falhas de volume e problemas em clusters Docker Swarm.

Classifique o chamado abaixo como N1, N2 ou N3 apenas com base nas defini√ß√µes acima.

T√≠tulo: {title}
Descri√ß√£o: {note}

Responda apenas com: N1, N2 ou N3.
""".strip()

    if not title.strip() and not note.strip():
        return "Indefinido ‚Äì t√≠tulo ou descri√ß√£o ausente."

    if not title.strip():
        title = "T√≠tulo ausente"

    if not note.strip():
        note = "Descri√ß√£o ausente"

    prompt = definicoes_nivel.format(title=title, note=note)

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente t√©cnico especializado em suporte a Docker."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Erro ao classificar n√≠vel: {str(e)}"


def classificar_criticidade_com_openai(title, note):
    definicoes_criticidade = """
Voc√™ √© um assistente t√©cnico treinado para classificar chamados com base na criticidade do problema onde analisa o titulo do chamado e descri√ß√£o e avalia o chamado apartir da defini√ß√µes abaixo:

- Cr√≠tico (1): Problemas graves que afetam diretamente o funcionamento do servi√ßo, como falhas cr√≠ticas, perda de dados, ou falha no servi√ßo principal.
- Alto (2): Problemas significativos que afetam o desempenho, mas n√£o paralisam completamente o servi√ßo.
- Normal (3): Problemas de m√©dio impacto, como ajustes ou melhorias que n√£o afetam diretamente o servi√ßo.
- Baixo (4): Problemas menores ou quest√µes de manuten√ß√£o, como ajustes de configura√ß√£o, problemas n√£o urgentes ou simples d√∫vidas.

Classifique o chamado abaixo como Cr√≠tico (1), Alto (2), Normal (3) ou Baixo (4) apenas com base nas defini√ß√µes acima.

T√≠tulo: {title}
Descri√ß√£o: {note}

Responda apenas com: 1 Cr√≠tico, 2 Alto, 3 Normal ou 4 Baixo.
""".strip()

    if not title.strip() and not note.strip():
        return "Indefinido ‚Äì t√≠tulo ou descri√ß√£o ausente."

    prompt = definicoes_criticidade.format(title=title, note=note)

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente t√©cnico especializado em suporte a chamados."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Erro ao classificar criticidade: {str(e)}"
    

def classificar_prioridade_com_openai(title, note):
    definicoes_prioridade = """
Voc√™ √© um assistente t√©cnico treinado para classificar chamados com base na prioridade, onde analisa o titulo do chamado e descri√ß√£o e avalia o chamado apartir da defini√ß√µes abaixo:

- 1 (Baixo): Solicita√ß√µes n√£o urgentes, sem impacto imediato ou relacionadas a d√∫vidas e melhorias menores.
- 2 (Normal): Chamados que requerem aten√ß√£o no fluxo padr√£o, mas sem urg√™ncia.
- 3 (Alto): Chamados que devem ser tratados o quanto antes, com impacto consider√°vel, mas que n√£o s√£o cr√≠ticos.

Classifique o chamado abaixo como 1, 2 ou 3, de acordo com essas defini√ß√µes.

T√≠tulo: {title}
Descri√ß√£o: {note}

Responda apenas com: 1 baixo, 2 normal ou 3 alto.
""".strip()

    if not title.strip() and not note.strip():
        return "Indefinido ‚Äì t√≠tulo ou descri√ß√£o ausente."

    prompt = definicoes_prioridade.format(title=title, note=note)

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente t√©cnico especializado em triagem de chamados."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Erro ao classificar prioridade: {str(e)}"


def extrair_atividades_csv(caminho_csv):
    atividades = []
    nome_catalogo = None
    with open(caminho_csv, encoding='cp1252') as arquivo:
        leitor = csv.DictReader(arquivo, delimiter=';')
        for linha in leitor:
            descricao = linha.get("descricao") or linha.get("Descri√ß√£o") or linha.get("descri√ß√£o") or linha.get("atividade")
            ust = linha.get("ust") or linha.get("UST")
            fonte = linha.get("fonte") or linha.get("Fonte") or "Fonte n√£o especificada"

            if descricao and ust:
                try:
                    atividades.append((descricao.strip(), float(ust.strip()), fonte.strip()))
                except ValueError:
                    continue
            if not nome_catalogo and fonte:
                nome_catalogo = fonte.strip()
    return nome_catalogo, atividades


def extrair_nome_catalogo_pdf(caminho_pdf):
    try:
        with open(caminho_pdf, "rb") as arquivo:
            leitor = PyPDF2.PdfReader(arquivo)
            primeira_pagina = leitor.pages[0]
            texto = primeira_pagina.extract_text()
            for linha in texto.split("\n"):
                if "Cat√°logo" in linha:
                    return linha.strip()
        return "Cat√°logo Desconhecido"
    except Exception as e:
        print(f"Erro ao ler o PDF: {e}")
        return "Cat√°logo Desconhecido"


def encontrar_melhor_atividade(titulo_chamado, descricao_chamado, atividades):
    if not descricao_chamado:
        return None, None, None

    prompt = f"""
        Voc√™ √© um assistente t√©cnico treinado para identificar tarefas espec√≠ficas em um cat√°logo fechado. O cat√°logo de fontes, tarefas e UST est√° listado logo abaixo e √© a **√∫nica fonte confi√°vel**.
        ---
        üìå **REGRAS OBRIGAT√ìRIAS**:
        - Voc√™ **N√ÉO PODE inventar, adaptar ou sugerir tarefas ou fontes** fora da lista abaixo.
        - A tarefa, UST e fonte devem vir **exatamente do cat√°logo listado**.
        - Se encontrar uma correspond√™ncia perfeita, retorne neste formato:

        Tarefa: [descri√ß√£o exata da tarefa]
        UST: [valor]
        Fonte: [fonte exata]

        - Se **n√£o encontrar nenhuma correspondente**, procure a **mais parecida** e retorne assim:

        ‚ùå Nenhuma tarefa referente encontrada nos cat√°logos. A mais pr√≥xima e recomendada √©:
        Tarefa: [descri√ß√£o mais semelhante da lista]
        UST: [valor]
        Fonte: [fonte da linha correspondente com o assunto do chamado]

        ‚ö†Ô∏è Caso invente qualquer texto fora da lista final, ser√° considerado erro cr√≠tico inadimicivel.

        ---

        üì¶ Cat√°logo fechado de tarefas dispon√≠veis:
        """ + "\n".join([f"- {desc} (UST: {ust}, Fonte: {fonte})" for desc, ust, fonte in atividades]) + f"""

        ---
        üìù Chamado a ser analisado:
        T√≠tulo: {titulo_chamado}
        Descri√ß√£o: {descricao_chamado}

        üîö Agora retorne apenas conforme os formatos exigidos acima, sem explica√ß√µes extras.
        """

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ seleciona e analisa tarefas, fontes e UST do cat√°logo sem inventar."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.0
        )

        resposta = response.choices[0].message.content.strip()

        # Processa a resposta
        if resposta.startswith('Tarefa:'):
            # Resposta de correspond√™ncia perfeita
            linhas = resposta.split('\n')
            tarefa = linhas[0].replace('Tarefa:', '').strip()
            ust = linhas[1].replace('UST:', '').strip()
            fonte = linhas[2].replace('Fonte:', '').strip()
            return tarefa, ust, fonte

        elif resposta.startswith('‚ùå'):
            # Resposta de sugest√£o (n√£o encontrou perfeita)
            linhas = resposta.split('\n')
            tarefa = linhas[1].replace('Tarefa:', '').strip()
            ust = linhas[2].replace('UST:', '').strip()
            fonte = linhas[3].replace('Fonte:', '').strip()
            return tarefa, ust, fonte

        else:
            return "Resposta fora do formato esperado.", None, None

    except Exception as e:
        return f"Erro ao encontrar atividade: {str(e)}", None, None

csv_atividades = 'consultoria_docker.csv'
atividades_ust = extrair_atividades_csv(csv_atividades)


def classificar_tipo_chamado(title, note, atividades_ust):
    melhor_atividade, ust_valor, fonte_catalogo = encontrar_melhor_atividade(title, note, atividades_ust)

    prompt = f"""
        Voc√™ √© um assistente t√©cnico de Service Desk onde analisa chamados t√©cnicos.

        Com base no t√≠tulo e na descri√ß√£o do chamado, classifique somente como requisi√ß√£o ou incidente, use a defini√ß√£o abaixo:

        - **Requisi√ß√£o**: quando se trata de solicita√ß√µes que exigem execu√ß√£o/desenvolvimento de tarefas, mudan√ßas ou servi√ßos.
        - **Incidente**: quando se trata de erros, falhas ou interrup√ß√µes.

        T√≠tulo: {title}
        Descri√ß√£o: {note}

        Retorne neste formato:
        Tipo: Requisi√ß√£o ou Incidente
    """.strip()

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente t√©cnico especializado em classifica√ß√£o de chamados."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1
        )
        return response.choices[0].message.content.strip(), melhor_atividade, ust_valor, fonte_catalogo
    except Exception as e:
        return f"Erro ao classificar tipo: {str(e)}", melhor_atividade, ust_valor, fonte_catalogo



def atualizar_categoria_chamado(ticket_id, categoria_pai, subcategoria):
    payload = {
        "categoria": [categoria_pai, subcategoria]
    }
    url = f"{ZAMMAD_API_URL}/api/v1/tickets/{ticket_id}"
    resposta = requests.put(url, headers=HEADERS_ZAMMAD, json=payload)
    return resposta.status_code == 200, resposta.text


def encontrar_categoria_pai(categorias, subcategoria_alvo):
    subcategoria_alvo = subcategoria_alvo.strip().lower()
    for categoria_pai, subcategorias in categorias.items():
        for sub in subcategorias:
            if sub.strip().lower() == subcategoria_alvo:
                return categoria_pai
    return None
    
  
def buscar_chamado_por_numero(numero):
    url = f"{ZAMMAD_API_URL}/api/v1/tickets/search?query=number:{numero}"
    resposta = requests.get(url, headers=HEADERS_ZAMMAD)

    if resposta.status_code == 200:
        resultados = resposta.json()

        if isinstance(resultados, list) and len(resultados) > 0:
            return resultados[0]  # Retorna diretamente o primeiro ticket encontrado

    return None


def obter_primeira_descricao(ticket_id):
    url = f"{ZAMMAD_API_URL}/api/v1/ticket_articles/by_ticket/{ticket_id}"
    resposta = requests.get(url, headers=HEADERS_ZAMMAD)
    if resposta.status_code == 200:
        artigos = resposta.json()
        if artigos:
            return artigos[0].get("body", "")
    return ""


# === INTERFACE STREAMLIT ===
st.set_page_config(page_title="Categorizador de Chamados", page_icon="üß†")
st.title("üß† Categorizador de Chamados I.A")

categorias = carregar_categorias(CATEGORIA_TXT)

if "classificacao_realizada" not in st.session_state:
    st.session_state.classificacao_realizada = False

with st.form("formulario_chamado"):
    numero_chamado = st.text_input("N√∫mero do chamado:")
    submitted = st.form_submit_button("Classificar Chamado")

    if submitted:
        if not numero_chamado.strip():
            st.warning("Por favor, informe um n√∫mero de chamado.")
            st.stop()

        chamado = buscar_chamado_por_numero(numero_chamado.strip())
        # st.write("üîç Chamado encontrado:", chamado)
        if chamado is None:
            st.error(f"‚ùå Chamado {numero_chamado} n√£o encontrado.")
            st.stop()
            

        ticket_id = chamado["id"]
        title = chamado.get("title", "Sem t√≠tulo")
        note = obter_primeira_descricao(ticket_id)

        criticidade = chamado.get("criticidade", "N√£o definida")
        tipo_chamado = chamado.get("tipo", "N√£o definido")
        grupo = chamado.get("group_id", "N√£o definido")
        prioridade = chamado.get("priority_id", "N√£o definida")

        st.subheader("üìÑ Detalhes do Chamado:")
        st.markdown(f"**T√≠tulo:** {title}")
        st.markdown(f"**Descri√ß√£o:** {note or 'Sem descri√ß√£o'}")
        st.markdown(f"**Criticidade:** {criticidade}")
        st.markdown(f"**Tipo:** {tipo_chamado}")
        st.markdown(f"**Grupo (ID):** {grupo}")
        st.markdown(f"**Prioridade (ID):** {prioridade}")
        prioridade_sugerida = classificar_prioridade_com_openai(title, note)
        

        prompt = gerar_prompt(title, note, categorias)

        try:
            categoria, subcategoria = classificar_com_openai(prompt)

            if not categoria or not subcategoria:
                st.error("‚ùå Resposta inv√°lida da OpenAI.")
                st.stop()

            categoria_pai = encontrar_categoria_pai(categorias, subcategoria)

            if not categoria_pai:
                st.error(f"‚ùå Subcategoria '{subcategoria}' n√£o encontrada nas categorias fornecidas.")
                st.stop()

            # Exibir sucesso (opcional)
            st.success(f"‚úÖ Classificado como: {categoria} > {subcategoria}")

            nivel_sugerido = classificar_nivel_com_openai(title, note)
            criticidade_sugerida = classificar_criticidade_com_openai(title, note)

            st.subheader("üìä Classifica√ß√£o Sugerida:")
            st.markdown(f"**Categoria Pai:** {categoria_pai}")
            st.markdown(f"**Subcategoria:** {subcategoria}")
            st.markdown(f"**N√≠vel de Suporte:** {nivel_sugerido}")
            st.markdown(f"**Criticidade:** {criticidade_sugerida}")
            st.markdown(f"**Prioridade Sugerida:** {prioridade_sugerida}")
            nome_grupo, grupo_id = classificar_grupo_com_openai(title, note, grupos_dict)
            st.markdown(f"**Grupo Sugerido** {nome_grupo} (ID: {grupo_id})")
            nome_catalogo, atividades_ust = extrair_atividades_csv(csv_atividades)
            resultado, melhor_atividade, ust_valor, fonte_catalogo = classificar_tipo_chamado(title, note, atividades_ust)
            st.markdown("**Resultado da Classifica√ß√£o de Tipo:**")
            st.text(resultado)

            # Determina o tipo
            tipo_classificado = "Incidente" if "Tipo: Incidente" in resultado else "Requisi√ß√£o"

            # Prepara o texto de exibi√ß√£o da melhor atividade com UST
            if tipo_classificado == "Incidente":
                texto_exibicao = "Este chamado √© um Incidente e, portanto, n√£o possui UST estimado."
                ust_extraida = None
            else:
                if melhor_atividade:
                    if melhor_atividade.lower().startswith("atividade n√£o encontrada"):
                        # Mensagem retornada pela IA quando n√£o encontra exatamente
                        texto_exibicao = melhor_atividade
                        ust_extraida = None
                    else:
                        texto_exibicao = melhor_atividade
                        ust_extraida = ust_valor
                else:
                    texto_exibicao = "Nenhuma atividade correspondente encontrada."
                    ust_extraida = None

            # Mostra a estimativa real da UST, se for requisi√ß√£o
            if tipo_classificado == "Requisi√ß√£o":
                st.subheader("üí∞ An√°lise da Tarefa do Cat√°logo:")
                st.markdown(f"- **Fonte:** {nome_catalogo}")  

                st.markdown(f"- **Resultado da busca no cat√°logo:**\n{textwrap.fill(texto_exibicao, width=80)}")
                if ust_extraida:
                    st.markdown(f"- **UST estimado:** {ust_extraida}")
                
            else:
                st.info("‚ÑπÔ∏è Este chamado √© um **Incidente** e, portanto, n√£o possui UST estimado.")

            if tipo_classificado == "Requisi√ß√£o" and ust_extraida:
                st.success(f"‚úÖ Classifica√ß√£o conclu√≠da!\nTipo: {tipo_classificado}\nUST estimado: {ust_extraida}")
            elif tipo_classificado == "Requisi√ß√£o":
                st.success(f"‚úÖ Classifica√ß√£o conclu√≠da!\nTipo: {tipo_classificado}\nUST estimado: N√£o encontrada")
            else:
                st.success(f"‚úÖ Classifica√ß√£o conclu√≠da!\nTipo: {tipo_classificado}")

        except Exception as e:
            st.error(f"‚ùå Erro durante classifica√ß√£o: {e}")
